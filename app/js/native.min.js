'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//
// eventEmiter.js
//

/*

option for cookie:
name - name cookie
value - value cookie
options:
  expires - time life for coolie in seconds
  path - path for cookie
  domain - domain for cookie
  secure - true/false if need send cookie with secure canal

*/

var Cookie = exports.Cookie = function () {
  function Cookie() {
    _classCallCheck(this, Cookie);
  }

  _createClass(Cookie, null, [{
    key: 'getCookies',
    value: function getCookies(name) {
      var cookies = {};
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = document.cookie.split('; ')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var cookie = _step.value;

          var _cookie$split = cookie.split('='),
              _cookie$split2 = _slicedToArray(_cookie$split, 2),
              _name = _cookie$split2[0],
              value = _cookie$split2[1];

          cookies[_name] = decodeURIComponent(value);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return cookies[name] ? JSON.parse(cookies[name]) : [];
    }
  }, {
    key: 'setCookie',
    value: function setCookie(name, value) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
        expires: 3600
      };

      var expires = options.expires;

      if (typeof expires == 'number' && expires) {
        var d = new Date();
        d.setTime(d.getTime() + expires * 1000);
        expires = options.expires = d;
      }

      if (expires && expires.toUTCString) {
        options.expires = expires.toUTCString();
      }

      value = encodeURIComponent(JSON.stringify(value));
      var updatedCookie = name + '=' + value;

      for (var propName in options) {
        updatedCookie += '; ' + propName;
        var propValue = options[propName];
        if (propValue !== true) {
          updatedCookie += '=' + propValue;
        }
      }

      document.cookie = updatedCookie;
    }
  }, {
    key: 'deleteCookie',
    value: function deleteCookie(name) {
      this.setCookie(name, '');
    }
  }]);

  return Cookie;
}();
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//
// native.js
//

var bufData = void 0;

var Native = exports.Native = function () {
  function Native() {
    _classCallCheck(this, Native);
  }

  _createClass(Native, null, [{
    key: 'init',


    /*
        initialization framework
    */

    value: function init() {
      Router.init();
    }

    /*
    *   register component
    */

  }, {
    key: 'component',
    value: function component() {
      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

      if (typeof url === 'string' && url.startsWith('/')) {
        Router.getComponentByRoute(name, url);
      } else {
        console.error('Invalid name component: ' + name);
      }
    }

    /*
    *   get HTML bu template string
    */

  }, {
    key: 'getHTMLDom',
    value: function getHTMLDom(component, data, parent) {
      var isRemove = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

      var temp = document.createElement('template');
      var result = void 0;

      if (temp.content && this.isElement(component)) {

        try {
          temp.innerHTML = eval('`' + component.innerHTML + '`');
        } catch (e) {
          debugger;
          console.log('%c error in Native.getHTMLDom()! ', 'color: #F44336');
          console.error(component, '\n', data, '\n', e);
        }

        if (this.isElement(parent)) {
          parent.appendChild(temp.content);
          result = parent.lastElementChild;
        } else {
          component.parentElement.appendChild(temp.content);
          result = component.parentElement.lastElementChild;
        }

        if (isRemove) {
          component.parentNode.removeChild(component);
        }
      } else {
        console.error('It\'s not dom component: ' + component);
      }
      return result;
    }

    /*
    *   go to new component
    */

  }, {
    key: 'goToLink',
    value: function goToLink(url) {
      if (typeof url === 'string') {
        Parse.getComponentByRoute(url);
      } else {
        console.error('Url is don`t string: ', url);
      }
    }

    /*
    *   add parse to Dynamic Component
    */

  }, {
    key: 'reChangeDomDynamically',
    value: function reChangeDomDynamically(component) {
      if (this.isElement(component)) {
        Parse.parsComponents(component);
      } else {
        console.error('This component is not dom: ', component);
      }
    }

    /*
    *   current Id dynamically page
    */

  }, {
    key: 'request',


    /*
     *  get and post request with callback
     *
     *  beforeSend, complete, error, success, onprogress
     *
     */

    value: function request() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { url: url },
          _ref$contentType = _ref.contentType,
          contentType = _ref$contentType === undefined ? 'multipart/form-data' : _ref$contentType,
          _ref$method = _ref.method,
          method = _ref$method === undefined ? 'GET' : _ref$method,
          _ref$processData = _ref.processData,
          processData = _ref$processData === undefined ? true : _ref$processData,
          _ref$url = _ref.url,
          url = _ref$url === undefined ? null : _ref$url,
          _ref$data = _ref.data,
          data = _ref$data === undefined ? null : _ref$data,
          _ref$beforeSend = _ref.beforeSend,
          beforeSend = _ref$beforeSend === undefined ? null : _ref$beforeSend,
          _ref$complete = _ref.complete,
          complete = _ref$complete === undefined ? null : _ref$complete,
          _ref$error = _ref.error,
          error = _ref$error === undefined ? null : _ref$error,
          _ref$success = _ref.success,
          success = _ref$success === undefined ? null : _ref$success,
          _ref$onprogress = _ref.onprogress,
          onprogress = _ref$onprogress === undefined ? null : _ref$onprogress;

      var body = ['\r\n'];

      var XHR = 'onload' in new XMLHttpRequest() ? XMLHttpRequest : XDomainRequest;
      var xhr = new XHR();

      if (data) {
        method = 'POST';
      }

      if (typeof onprogress === 'function') {
        xhr.onprogress = onprogress;
      }

      xhr.open(method, url, true);

      if (data) {
        var boundary = String(Math.random()).slice(2);
        var boundaryMiddle = '--' + boundary + '\r\n';
        var boundaryLast = '--' + boundary + '--\r\n';

        for (var key in data) {
          body.push('Content-Disposition: form-data; name="' + key + '"\r\n\r\n' + data[key] + '\r\n');
        }

        body = body.join(boundaryMiddle) + boundaryLast;
        xhr.setRequestHeader('Content-Type', contentType + '; boundary=' + boundary);
      }

      xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");

      if (typeof beforeSend === 'function') {
        beforeSend();
      }

      xhr.send(body);

      xhr.onload = function (response) {

        var codeStatus = response.currentTarget.status;
        var responseText = response.currentTarget.responseText;

        if (processData) {
          try {
            responseText = JSON.parse(responseText);
          } catch (e) {
            console.error(e, responseText);
          }
        }

        if (Var.codeStatusServer[codeStatus]) {
          Observer.emit('Server: ' + codeStatus, response, responseText, url, success);
          return;
        }

        if (typeof success === 'function') {
          success(responseText, url);
        }

        if (typeof complete === 'function') {
          complete();
        }
      };

      xhr.onerror = function (e) {
        if (typeof error === 'function') {
          error(e, url);
        } else {
          console.error('Error ' + e.target.status + ' occurred while receiving the document.');
        }
      };
    }

    /*
    *   Set Value Data By Attribute to Dom
    */

  }, {
    key: 'setValueDataByAttr',
    value: function setValueDataByAttr() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


      ParseJSON.parseDataGet(data['fields'], ParseJSON.setAttrToComponent.bind(ParseJSON));

      var obj = data['form'];
      var element = document.getElementById(obj['id']);

      if (this.isElement(element)) {
        for (var key in obj) {
          element.setAttribute(key, obj[key]);
        }
      }

      obj = data['data'];
      for (var _key in obj) {
        ParseJSON.parseDataGet(obj[_key], ParseJSON.insertValueToComponent.bind(ParseJSON), '', true);
      }
    }

    /*
     *  returns true if it is a DOM element
    */

  }, {
    key: 'isElement',
    value: function isElement(obj) {
      return (typeof HTMLElement === 'undefined' ? 'undefined' : _typeof(HTMLElement)) === "object" ? obj instanceof HTMLElement : //DOM2
      obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === "object" && obj !== null && obj.nodeType === 1 && typeof obj.nodeName === "string";
    }

    /*
    *   Find first ancestor by class
    */

  }, {
    key: 'findAncestorByClass',
    value: function findAncestorByClass(element, className) {
      if (this.isElement(element) && typeof className === 'string') {
        while (!element.classList.contains(className) && (element = element.parentElement)) {}
      }
      return element;
    }

    /*
     *   set default data for Fields
     */

  }, {
    key: 'setDefaultFields',
    value: function setDefaultFields(component, fields) {
      var str = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var isOnlyClass = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

      if (this.isElement(component) && fields) {
        ParseJSON.setValue(component, fields, ParseJSON.setAttrToComponent.bind(ParseJSON), typeof str === 'string' ? str : str.toString(), true, isOnlyClass);
      }
    }

    /*
    *     set form attributes
    */

  }, {
    key: 'setForm',
    value: function setForm(componentName, attr) {
      var component = document.getElementById(componentName);
      if (component) {
        delete attr.id;
        for (var key in attr) {
          component.setAttribute(key, attr[key]);
        }
      }
    }

    /*
     *   insert data for data
     */

  }, {
    key: 'insertData',
    value: function insertData(component, data) {
      var str = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var isOnlyClass = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

      if (this.isElement(component) && data) {
        ParseJSON.setValue(component, data, ParseJSON.insertValueToComponent.bind(ParseJSON), typeof str === 'string' ? str : str.toString(), false, isOnlyClass);
      }
    }

    /*
    *     get data after submit form 
    */

  }, {
    key: 'getDataAfterForm',
    value: function getDataAfterForm() {
      return Parse.getDataAfterForm;
    }

    /*
    *     custom handler
    */

  }, {
    key: 'customHadlerAfterForm',
    value: function customHadlerAfterForm(func) {
      Parse.customHadlerAfterForm(func);
    }

    /*
    *     buf variables
    */

  }, {
    key: 'bufVariables',
    value: function bufVariables(data) {
      if (data) {
        bufData = data;
      } else {
        return bufData;
      }
    }

    /*
     *   get data to component
     */

  }, {
    key: 'getDataAttrToComponent',
    value: function getDataAttrToComponent(component) {
      var result = {};
      if (this.isElement(component)) {
        for (var attr in component.attributes) {
          result.attr = component.getAttribute(attr);
        }
      }
      return result;
    }

    /*
    *   set data to component
    */

  }, {
    key: 'setDataAttrToComponent',
    value: function setDataAttrToComponent(component) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (this.isElement(component) && data.length !== 0) {
        for (var attr in data) {
          component.setAttribute('data-' + attr, data[attr]);
        }
      }
    }
  }, {
    key: 'getIdCurrentPage',
    get: function get() {
      return Parse.idCurrentPage;
    }
  }]);

  return Native;
}();
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//
// observer.js
//

var isFunction = function isFunction(obj) {
  return typeof obj == 'function' || false;
};

var listeners = new Map();

var Observer = exports.Observer = function () {
  function Observer() {
    _classCallCheck(this, Observer);
  }

  _createClass(Observer, null, [{
    key: 'addListener',
    value: function addListener(eventName, callback) {

      var listeners = this.listeners.get(eventName);
      var hashCallback = this.hashCode(callback);

      if (listeners && listeners.length) {
        for (var i = 0; i < listeners.length; i++) {
          if (listeners[i].hash === hashCallback) {
            listeners.splice(i, 1);
            break;
          }
        }
      }

      this.listeners.has(eventName) || this.listeners.set(eventName, []);
      this.listeners.get(eventName).push({ func: callback, hash: this.hashCode(callback) });
    }
  }, {
    key: 'removeListener',
    value: function removeListener(eventName, callback) {
      var listeners = this.listeners.get(eventName);
      var index = void 0;

      if (listeners && listeners.length) {
        var hashCallback = this.hashCode(callback);
        index = listeners.reduce(function (i, listener, index) {
          return isFunction(listener.func) && listener.hash === hashCallback ? i = index : i;
        }, -1);
        if (index > -1) {
          listeners.splice(index, 1);
          this.listeners.set(eventName, listeners.func);
          return true;
        }
      }
      return false;
    }
  }, {
    key: 'emit',
    value: function emit(eventName) {
      var result = false;
      var listeners = this.listeners.get(eventName);

      if (listeners && listeners.length) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = listeners[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var listener = _step.value;

            var isRemove = listener.func.apply(listener, args);
            if (isRemove) {
              this.removeListener(eventName, listener.func);
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        result = true;
      }

      return result;
    }
  }, {
    key: 'hashCode',
    value: function hashCode(str) {
      var hash = 0;
      str = typeof str === 'string' ? str : str.toString();

      if (str.length == 0) return hash;
      for (var i = 0; i < str.length; i++) {
        var char = str.charCodeAt(i);
        hash = (hash << 5) - hash + char;
        hash = hash & hash; // Convert to 32bit integer
      }
      return hash;
    }
  }, {
    key: 'listeners',
    get: function get() {
      return listeners;
    }
  }]);

  return Observer;
}();
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _customHadlerAfterForm = void 0;

var ParseJSON = exports.ParseJSON = function () {
  function ParseJSON() {
    _classCallCheck(this, ParseJSON);
  }

  _createClass(ParseJSON, null, [{
    key: 'customHadlerAfterForm',
    value: function customHadlerAfterForm(func) {
      _customHadlerAfterForm = func;
    }

    /*
     *   When need recursion for table
     */

  }, {
    key: 'parseDataGet',
    value: function parseDataGet(data, callback) {
      var strForTable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var isDataTable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;


      for (var id in data) {

        if (data[id] !== null) {
          var component = void 0;

          if (strForTable.length === 0) {
            component = document.getElementById(id);
          } else {
            component = document.getElementById(strForTable + ':' + id);
          }

          if (Native.isElement(component)) {
            callback(component, data[id]);
          }

          // has prefix "tableid_" for recursion
          else if (id.startsWith(Variables.paramsJSONTable)) {
              if (isDataTable) {
                callback(component, data[id], id.replace(new RegExp('^' + Variables.paramsJSONTable), ''));
              } else {
                this.parseDataGet(data[id][Variables.paramsJSONList], callback, id.replace(new RegExp('^' + Variables.paramsJSONTable), ''), isDataTable);
              }
            }
        }
      }
    }

    /*
    *   set attributes to component
    */

  }, {
    key: 'setAttrToComponent',
    value: function setAttrToComponent(component) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};


      for (var attr in params) {

        // if attr === type
        if (attr === Variables.paramsJSONType) {
          if (params[attr] !== Variables.paramsJSONSet && params[attr] !== Variables.paramsJSONEnum) {
            component.setAttribute(attr, params[attr]);
          }
        }

        // if attr !== list
        else if (attr !== Variables.paramsJSONList && attr !== Variables.paramsJSONTitle) {
            component.setAttribute(attr, params[attr]);
          }
      }

      var func = this.components[component.tagName];

      try {
        if (func) {

          // if has attr in params 'list'
          if (_typeof(params[Variables.paramsJSONList]) === 'object' && func.createList) {
            delete params[Variables.paramsJSONList].count;
            func.createList(component, params[Variables.paramsJSONList], params[Variables.paramsJSONType] === Variables.paramsJSONSet);
          }

          // if has attr in params 'title'
          else if (params[Variables.paramsJSONTitle] && func.setDefaultAttr) {
              func.setDefaultAttr(component, params[Variables.paramsJSONTitle]);
            }
          // if (component.tagName === 'SELECT') debugger;

          // set default value TODO: refactor need default set value for select component.tagName !== 'SELECT' &&
          if (params[Variables.paramsJSONDefault] && func.addAttrToComponent) {
            func.addAttrToComponent(component, params[Variables.paramsJSONDefault]);
          }
        } else {
          // console.log(`Not found in frame: ${ component.tagName }`);
        }
      } catch (e) {
        console.log(e, component, params);
      }
    }
  }, {
    key: 'insertValueCurrentComponent',
    value: function insertValueCurrentComponent(component, attr) {

      if (component.hasAttribute(Variables.paramsNotInsertData)) return;

      var func = this.components[component.tagName];
      if (func && func.addAttrToComponent) {
        func.addAttrToComponent(component, attr);
      } else {
        if (Object.prototype.toString.call(attr) === '[object Array]') {} else {
          component.textContent = attr;
          // console.log(`Not found in frame: ${ component }`);
        }
      }
    }
  }, {
    key: 'setNewAttrIdAndName',
    value: function setNewAttrIdAndName(component, index) {
      var nameAttr = component.getAttribute('name');
      var idAttr = component.getAttribute('id');
      component.setAttribute('name', nameAttr + '[' + index + ']');
      component.setAttribute('id', idAttr + '-' + index);
    }
  }, {
    key: 'changeAttrIdAndName',
    value: function changeAttrIdAndName(component) {
      var nameAttr = component.getAttribute('name').replace('[0]', '');
      component.setAttribute('name', nameAttr);
    }

    /*
     *   Insert data after create component
     */

  }, {
    key: 'insertValueToComponent',
    value: function insertValueToComponent(component, attr) {
      var _this = this;

      var strForTable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';


      function getDefaultComponent(parent) {
        if (parent) {
          var temp = document.createElement('template');
          temp.innerHTML = parent.innerHTML;
          // debugger;
          //
          // document.querySelectorAll(`[${ Variables.paramsForClick }="${ parent.getAttribute(Variables.paramsJSONIdForTable) }"]`).forEach((component) => {
          //   component.onclick = function() {
          //     debugger;
          //     const newComponent = temp.cloneNode(true);
          //     const parent = document.querySelector(`[${ Varibales.paramsJSONIdForTable }="${ this.getAttribute(Variables.paramsForClick) }"]`)
          //     parent.appendChild(newComponent);
          //   };
          // });

          return temp;
        }
      }

      var tableIdParse = function tableIdParse(curComponent, data, strForTable) {

        /* first, get parent and default component */
        var parent = void 0;
        var defaultComponent = void 0;
        var index = 0;

        for (var id in data[index]) {
          var _getDom2 = _this._getDom(curComponent, id, strForTable, '[' + index + ']'),
              _getDom3 = _slicedToArray(_getDom2, 1),
              doms = _getDom3[0];

          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = doms[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var dom = _step.value;

              _this.changeAttrIdAndName(dom);
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        }

        for (var _id in data[index]) {
          var _getDom4 = _this._getDom(curComponent, _id, strForTable),
              _getDom5 = _slicedToArray(_getDom4, 1),
              doms = _getDom5[0];

          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {

            for (var _iterator2 = doms[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var _dom = _step2.value;

              if (!parent) {
                parent = Native.findAncestorByClass(_dom, Variables.paramsJSONIdForTable);
                defaultComponent = getDefaultComponent(parent);
              }
              if (data[index][_id].length !== 0) {
                _this.insertValueCurrentComponent(_dom, data[index][_id]);
              }
              _this.setNewAttrIdAndName(_dom, index);
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        }

        if (!parent) {
          // let dom;
          // if (component.hasAttribute(Variables.paramsForm)) {
          //   dom = document.querySelector(`[name^="${ strForTable }"]`);
          // } else {
          //   dom = component.querySelector(`[name^="${ strForTable }"]`);
          // }
          // if (dom) {
          //   getDefaultComponent(Native.findAncestorByClass(dom, Variables.paramsJSONIdForTable));
          // }
          return;
        }

        /* secondary components */

        for (index++; index < data.length; index++) {
          var newComponent = defaultComponent.cloneNode(true);

          for (var _id2 in data[index]) {
            var _getDom6 = _this._getDom(newComponent.content.firstElementChild, _id2, strForTable),
                _getDom7 = _slicedToArray(_getDom6, 1),
                doms = _getDom7[0];

            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {

              for (var _iterator3 = doms[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var _dom2 = _step3.value;

                if (data[index][_id2].length !== 0) {
                  _this.insertValueCurrentComponent(_dom2, data[index][_id2]);
                  _this.setNewAttrIdAndName(_dom2, index);
                }
              }
            } catch (err) {
              _didIteratorError3 = true;
              _iteratorError3 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                  _iterator3.return();
                }
              } finally {
                if (_didIteratorError3) {
                  throw _iteratorError3;
                }
              }
            }
          }

          parent.appendChild(newComponent.content);
        }
      };

      if (attr !== null) {
        if (strForTable.length !== 0 && Object.prototype.toString.call(attr) === '[object Array]') {
          tableIdParse(component, attr, strForTable);
        } else if (component && attr.length !== 0) {
          this.insertValueCurrentComponent(component, attr);
        }
        /* else if (Object.prototype.toString.call(attr) === '[object Array]') {
          debugger;
          const parent = Native.findAncestorByClass(component, Variables.paramsJSONIdForTable);
          if (parent) {
            getDefaultComponent(parent);
          }
        } */
      }
    }
  }, {
    key: 'insertDataToAttrSetText',
    value: function insertDataToAttrSetText(component) {
      var textContent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

      if (component.children.length !== 0) {
        for (var i = 0; i < component.children.length; i++) {
          this.insertDataToAttrSetText(component.children[i], textContent);
        }
      }
      if (component && component.hasAttribute(Variables.paramsJSONSetText)) {
        component.textContent = textContent;
      }
    }
  }, {
    key: 'setValue',
    value: function setValue(component, attr, callback) {
      var str = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
      var isDefault = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

      var _this2 = this;

      var isOnlyClass = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
      var strTable = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : '';


      if (strTable) {
        attr = attr[Variables.paramsJSONList];
      }

      for (var name in attr) {
        var _getDom8 = this._getDom(component, name, strTable, isDefault || isOnlyClass ? '' : str),
            _getDom9 = _slicedToArray(_getDom8, 2),
            doms = _getDom9[0],
            nameField = _getDom9[1];

        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {

          for (var _iterator4 = doms[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var dom = _step4.value;

            if (isDefault) {

              if (strTable.length !== 0) {
                (function () {

                  var parent = Native.findAncestorByClass(dom, Variables.paramsJSONIdForTable);

                  if (parent) {
                    // && parent.getAttribute(Variables.paramsJSONIdForTable).length === 0

                    var changeNameInTableId = function changeNameInTableId(newComponent, index, idParent) {
                      for (var id in attr) {
                        var _component = newComponent.querySelector('[name="' + strTable + ':' + id + '"]') || newComponent.querySelector('[name="' + strTable + ':' + id + '[]"]');
                        if (_component) {
                          if (idParent) {
                            _component.setAttribute('id', _component.getAttribute('id') + '-' + idParent);
                          }
                          _this2.setAttrToComponent(_component, attr[id]);
                          _this2.setNewAttrIdAndName(_component, index);
                        }
                      }
                    };

                    var changeNameForTableId = function changeNameForTableId(parent, temp, index, idParent) {
                      var newComponent = temp.cloneNode(true);

                      newComponent.content.querySelectorAll('[' + Variables.paramsChangeId + ']').forEach(function () {
                        this.setAttribute('id', this.getAttribute('id') + '-' + index);
                      });

                      changeNameInTableId(newComponent.content, index, idParent);
                      parent.appendChild(newComponent.content);
                    };

                    var indexArrayTableId = 0;

                    var idParent = dom.getAttribute(Variables.paramsJSONIdData);

                    if (idParent) {
                      parent.setAttribute(Variables.paramsJSONIdForTable, idParent);
                    }

                    var temp = document.createElement('template');
                    temp.innerHTML = parent.innerHTML;

                    changeNameInTableId(parent, indexArrayTableId--, idParent);

                    document.querySelectorAll('[' + Variables.paramsForClick + '="' + parent.getAttribute(Variables.paramsJSONIdForTable) + '"]').forEach(function (component) {
                      component.onclick = function (e) {
                        e.preventDefault();
                        changeNameForTableId(parent, temp, indexArrayTableId--, idParent);
                      };
                    });
                  }
                })();
              }

              /*
               *   change name
               */

              // const intArray = str.match(/\d+/g);
              if (!isOnlyClass) dom.setAttribute('name', '' + nameField + str);
              dom.setAttribute('id', nameField + '-' + str); // if (intArray) ... (intArray) ? intArray.join('') : ''
            }
            callback(dom, attr[name]);
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4.return) {
              _iterator4.return();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }

        if (doms.length === 0) {
          if (name.startsWith(Variables.paramsJSONTable)) {
            if (isDefault) {
              this.setValue(component, attr[name], callback, str, isDefault, isOnlyClass, name.replace(new RegExp('^' + Variables.paramsJSONTable), ''));
            } else {
              callback(component, attr[name], name.replace(new RegExp('^' + Variables.paramsJSONTable), ''));
            }
          } else if (component && !isDefault && Object.prototype.toString.call(attr[name]) === '[object Array]') {
            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
              for (var _iterator5 = attr[name][Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                var value = _step5.value;


                var domArray = void 0;
                if (component.hasAttribute(Variables.paramsForm)) {
                  domArray = document.querySelector('[name="' + nameField + '[]"][' + Variables.paramsJSONIdData + '="' + value.id + '"][' + Variables.paramsFormChildren + '="' + component.getAttribute('id') + '"]');
                } else {
                  domArray = component.querySelector('[name="' + nameField + '[]"][' + Variables.paramsJSONIdData + '="' + value.id + '"]');
                }

                if (domArray) {
                  callback(domArray, value);
                }
              }
            } catch (err) {
              _didIteratorError5 = true;
              _iteratorError5 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion5 && _iterator5.return) {
                  _iterator5.return();
                }
              } finally {
                if (_didIteratorError5) {
                  throw _iteratorError5;
                }
              }
            }
          }
        }
      }
    }

    /*
    *   get dom
    */

  }, {
    key: '_getDom',
    value: function _getDom(component, name, strTable) {
      var str = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';

      var dom = void 0;

      var nameField = strTable.length !== 0 ? strTable + ':' + name + str : '' + name + str;

      if (component && component.hasAttribute(Variables.paramsForm)) {
        dom = document.querySelectorAll('[name="' + nameField + '"][' + Variables.paramsFormChildren + '="' + component.getAttribute('id') + '"]');
      } else if (component) {
        dom = component.querySelectorAll('[name="' + nameField + '"]');
      }
      return [dom, nameField];
    }
  }, {
    key: 'components',
    get: function get() {
      return {
        'SELECT': Select,
        'INPUT': Input,
        'TEXTAREA': TextArea
      };
    }
  }, {
    key: 'getDataAfterForm',
    get: function get() {
      return dataAfterForm;
    }
  }]);

  return ParseJSON;
}();
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var currentLink = '';

var Router = exports.Router = function () {
	function Router() {
		_classCallCheck(this, Router);
	}

	_createClass(Router, null, [{
		key: 'init',
		value: function init() {

			this.urls = Var.urls;

			var url = this.urls[window.location.pathname];

			if (url && url.component) {
				Native.request({
					url: url.component,
					processData: false,
					success: function success(response) {
						Parse.init(response);
					}
				});
			} else {
				Parse.init();
			}

			this.routing(url, true);

			// window.onpopstate = (obj) => {
			// Parse.setStateHistoryComponents();
			// if (obj && obj.state) {
			// 	Parse.setComponent(obj.state.component);
			// } else {
			// 	Parse.setComponent('', true);
			// }
			// this.routing(document.location.pathname, true);
			// Observer.emit(Var.documentIsReady);
			// };
		}
	}, {
		key: 'routing',
		value: function routing(url) {
			var isHistoryBack = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;


			if (url !== currentLink) {

				currentLink = url;
				var curURL = this.urls[url];
				if (curURL) {
					document.title = curURL.title;
					console.log(curURL);
				} else {
					console.log('/404');
				}

				if (!isHistoryBack) {
					history.pushState({ url: url, component: Parse.mainContent.innerHTML }, '', url);
				}
			}
		}

		/*
   *   parse Router link for dynamically component
   */

	}, {
		key: 'routerLink',
		value: function routerLink(componentDom) {
			componentDom.querySelectorAll('[' + Var.routerAttr + ']').forEach(function (component) {
				component.onclick = function (e) {
					e.preventDefault();
					Router.getComponentByRoute(this.getAttribute('href'));
				};
			});
		}

		/*
   *   get component by route
   */

	}, {
		key: 'getComponentByRoute',
		value: function getComponentByRoute(name, url) {
			if (url.startsWith('/')) {

				if (Parse.cache[url]) {
					Parse.setComponent(name, Parse.cache[url]);
				} else {
					Native.request({
						url: url,
						processData: false,
						success: function success(component) {
							Parse.setComponent(name, url, component);
							Router.routing(url);
						}
					});
				}
			}
		}
	}]);

	return Router;
}();
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//
// variables.js
//


// common
var bind = 'n-bind:';
var router = 'n-href';
var listener = 'n-on:';
var className = 'n-class';
var nameMainContent = 'app-main';
var scriptStandard = 'es6';

// JSON
var JSONIdData = 'data-id';
var JSONTable = 'tableid_';
var JSONList = 'list';
var JSONTitle = 'title';
var JSONSet = 'set';
var JSONEnum = 'enum';
var JSONType = 'type';
var JSONDefault = 'default';

// Observer
var documentIsReady = 'documentIsReady';

// Errors (throw message)
var errMethods = 'n-method has problem';

// Urls

var urls = {
  '/': {
    title: 'native',
    component: '/components/dynamic.html'
  }
};

// code status server

var codeStatusServer = {
  '401': {
    url: '/customer/login-user/'
  }

};

var Var = exports.Var = function () {
  function Var() {
    _classCallCheck(this, Var);
  }

  _createClass(Var, null, [{
    key: 'router',


    /*
    *  Common
    */

    get: function get() {
      return router;
    }
  }, {
    key: 'listener',
    get: function get() {
      return listener;
    }
  }, {
    key: 'className',
    get: function get() {
      return className;
    }
  }, {
    key: 'methodsOfClass',
    get: function get() {
      return methodsOfClass;
    }
  }, {
    key: 'nameMainContent',
    get: function get() {
      return nameMainContent;
    }
  }, {
    key: 'scriptStandard',
    get: function get() {
      return scriptStandard;
    }

    /*
    * JSON
    */

  }, {
    key: 'JSONIdData',
    get: function get() {
      return paramsJSONIdData;
    }
  }, {
    key: 'JSONTable',
    get: function get() {
      return paramsJSONTable;
    }
  }, {
    key: 'paramsJSONList',
    get: function get() {
      return paramsJSONList;
    }
  }, {
    key: 'paramsJSONTitle',
    get: function get() {
      return paramsJSONTitle;
    }
  }, {
    key: 'paramsJSONSet',
    get: function get() {
      return paramsJSONSet;
    }
  }, {
    key: 'paramsJSONEnum',
    get: function get() {
      return paramsJSONEnum;
    }
  }, {
    key: 'paramsJSONType',
    get: function get() {
      return paramsJSONType;
    }
  }, {
    key: 'paramsJSONDefault',
    get: function get() {
      return paramsJSONDefault;
    }

    /*
    * Observer
    */

  }, {
    key: 'documentIsReady',
    get: function get() {
      return documentIsReady;
    }

    /*
      Urls
    */

  }, {
    key: 'urls',
    get: function get() {
      return urls;
    }
  }, {
    key: 'codeStatusServer',


    /*
        codeStatusServer
    */

    get: function get() {
      return codeStatusServer;
    }
  }]);

  return Var;
}();
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var scriptIncludes = [];

var Script = exports.Script = function () {
    function Script() {
        _classCallCheck(this, Script);
    }

    _createClass(Script, null, [{
        key: 'hasAttr',
        value: function hasAttr(component) {
            // if tag have a app-script
            component.querySelectorAll('script[type="' + Var.scriptStandard + '"]').forEach(function (script) {
                if (script.getAttribute('src')) {
                    scriptIncludes.push(script.getAttribute('src'));
                } else {
                    try {
                        new Function('Native', script.innerHTML).call(Native, Native);
                    } catch (e) {
                        console.error('\n' + script.outerHTML + '\n\n', e);
                    }
                }
            });
        }

        /*
        *   import script dynamically
        */

    }, {
        key: 'importScript',
        value: function importScript(component) {
            var scriptsComponent = [];

            component.querySelectorAll(Var.dynamicallyScript).forEach(function (dom) {
                scriptsComponent.push(dom.getAttribute('src'));
            });

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = scriptIncludes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var script = _step.value;

                    var normalized = System.normalizeSync(script);
                    if (System.has(normalized) && scriptsComponent.includes(script)) {
                        System.delete(normalized);
                    }
                    System.import(script);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }, {
        key: 'scriptIncludes',
        get: function get() {
            return scriptIncludes;
        }
    }]);

    return Script;
}();
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Input = exports.Input = function () {
  function Input() {
    _classCallCheck(this, Input);
  }

  _createClass(Input, null, [{
    key: 'classNameByTag',
    value: function classNameByTag(tag) {
      return this.classNames[tag] ? this.classNames[tag] : this.defaultClassName;
    }

    /*
     *   set default value
     */

  }, {
    key: 'setDefaultAttr',
    value: function setDefaultAttr(component, attr) {

      var className = this.classNameByTag(component.type);
      var result = void 0;

      if (className) {
        result = Native.findAncestorByClass(component, className);
      }

      if (result) {
        ParseJSON.insertDataToAttrSetText(result, attr);
      } else {
        throw new SyntaxError('\u0414\u0430\u043D\u043D\u044B\u0435 \u043D\u0435\u043A\u043E\u0440\u0440\u0435\u043A\u0442\u043D\u044B, \u043F\u043E\u043B\u0435 input');
      }
    }

    /*
     *   create inputs
     */

  }, {
    key: 'createList',
    value: function createList(component, list) {
      var isSet = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var isReturnDomString = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;


      this.isSet = isSet;

      var typeComponent = component.getAttribute('type');
      var className = this.classNameByTag(typeComponent);

      if (className) {

        var idComponent = component.id;
        component = Native.findAncestorByClass(component, className);

        if (component) {

          var template = document.createElement('template');

          for (var item in list) {
            if (typeof list[item] === 'string') {
              var newComponent = component.firstElementChild.cloneNode(true);
              this._appendDomToComponent(newComponent, template.content, item, list[item]);
              template.content.appendChild(newComponent);
            }
          }

          if (isReturnDomString) {
            return template.innerHTML;
          }

          component.id = idComponent;
          component.innerHTML = template.innerHTML;
        }
      }
    }

    /*
     *   selected active item for input and set value
     */

  }, {
    key: 'addAttrToComponent',
    value: function addAttrToComponent(component) {
      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';


      switch (component.getAttribute('type')) {

        // radio || checkbox

        case 'radio':
        case 'checkbox':
          if (value) {
            component.setAttribute('checked', true);
            component.checked = true;
          } else {
            component.removeAttribute('checked');
            component.checked = false;
          }
          break;

        // other types for input

        default:
          component.value = value;
          break;
      }
    }
  }, {
    key: '_appendDomToComponent',
    value: function _appendDomToComponent(component, parent, dataId) {
      var textContent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';


      if (component.children.length !== 0) {
        for (var i = 0; i < component.children.length; i++) {
          this._appendDomToComponent(component.children[i], parent, dataId, textContent);
        }
      }

      if (component.tagName === 'INPUT') {
        if (this.isSet) {
          component.name += '[]';
          component.value = dataId;
          component.setAttribute(Variables.paramsJSONIdData, dataId);
        } else {
          component.value = 1;
        }
        component.id += '-' + parent.children.length;
      }
      // else if (component.tagName === 'LABEL') {
      //   component.htmlFor += `-${ parent.children.length }`;
      // }
      else if (component.hasAttribute(Variables.paramsJSONSetText)) {
          component.textContent = textContent;
        }
    }
  }, {
    key: 'classNames',
    get: function get() {
      return {
        'radio': 'c-app-radio',
        'checkbox': 'c-app-checkbox'
      };
    }
  }, {
    key: 'defaultClassName',
    get: function get() {
      return 'c-app-input';
    }
  }]);

  return Input;
}();
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Select = exports.Select = function () {
  function Select() {
    _classCallCheck(this, Select);
  }

  _createClass(Select, null, [{
    key: 'createList',


    /*
    *   create <option></option> list
    */

    value: function createList(component, list) {

      component = Native.findAncestorByClass(component, this.className);

      if (component) {

        var isArray = Object.prototype.toString.call(list) === '[object Array]';

        for (var key in list) {

          var option = document.createElement('option');

          option.setAttribute(Variables.paramsJSONForPost, isArray ? list[key] : key);
          option.textContent = list[key];

          component.appendChild(option);
        }
        // debugger

        // component.selectedIndex = 0;
      } else {
        throw new SyntaxError('\u0414\u0430\u043D\u043D\u044B\u0435 \u043D\u0435\u043A\u043E\u0440\u0440\u0435\u043A\u0442\u043D\u044B, \u043F\u043E\u043B\u0435 select');
      }
    }

    /*
    *   selected active item
    */

  }, {
    key: 'addAttrToComponent',
    value: function addAttrToComponent(component, attr) {

      if (component.children.length !== 0) {

        if (component.selectedIndex > -1) {
          var index = component.selectedIndex;
          var option = component.children[index];
          component.selectedIndex = -1;
          option.selected = false;
          option.removeAttribute('selected');
        }

        for (var i = 0; i < component.children.length; i++) {
          var _option = component.children[i];
          if (_option.getAttribute(Variables.paramsJSONForPost) == attr || _option.text == attr) {
            component.selectedIndex = i;
            _option.selected = true;
            _option.setAttribute('selected', true);
            break;
          }
        }
      }
    }
  }, {
    key: 'className',
    get: function get() {
      return 'c-app-select';
    }
  }]);

  return Select;
}();
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TextArea = exports.TextArea = function () {
  function TextArea() {
    _classCallCheck(this, TextArea);
  }

  _createClass(TextArea, null, [{
    key: 'setDefaultAttr',


    /*
     *   set default value
     */

    value: function setDefaultAttr(component, attr) {

      component = Native.findAncestorByClass(component, this.className);

      if (component) {
        ParseJSON.insertDataToAttrSetText(component, attr);
      } else {
        throw new SyntaxError('\u0414\u0430\u043D\u043D\u044B\u0435 \u043D\u0435\u043A\u043E\u0440\u0440\u0435\u043A\u0442\u043D\u044B, \u043F\u043E\u043B\u0435 textarea');
      }
    }

    /*
     *    set value
     */

  }, {
    key: 'addAttrToComponent',
    value: function addAttrToComponent(component, value) {
      component.textContent = value;
    }
  }, {
    key: 'className',
    get: function get() {
      return 'c-app-textarea';
    }
  }]);

  return TextArea;
}();
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Bind = exports.Bind = function () {
	function Bind() {
		_classCallCheck(this, Bind);
	}

	_createClass(Bind, [{
		key: "destructor",
		value: function destructor() {}
	}]);

	return Bind;
}();
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var conuterRequestAPI = 0;
var stateHistoryComponents = [];
var firstComponent = void 0;

var dataAfterForm = void 0;

var mainContent = void 0;

var virtuals = [];
var cache = {};

var Parse = exports.Parse = function () {
    function Parse() {
        _classCallCheck(this, Parse);
    }

    _createClass(Parse, null, [{
        key: "init",
        value: function init(component) {
            this.page = document.body;
            mainContent = this.page.getElementsByTagName(Var.nameMainContent)[0];

            if (!mainContent) {
                throw "not found <" + Var.nameMainContent + ">";
            }

            // firstComponent = this.mainContent.innerHTML;
            if (component) {
                conuterRequestAPI = 0;
                mainContent.innerHTML = component;
            }

            this.parsComponents(this.page);
            this._documentIsReady(this.page);
        }
    }, {
        key: "parsComponents",


        // static setStateHistoryComponents() {
        //     stateHistoryComponents.push(this.mainContent.innerHTML);
        // }

        // static setMainContent(index = 0) {
        //     if (index < stateHistoryComponents.length) {
        //         this.mainContent.innerHTML = stateHistoryComponents[index];
        //     } else {
        //         console.log(`don't find component in stateHistory`);
        //     }
        // }

        // static setComponent(component, isFirst = false) {
        //     if (isFirst) {
        //         mainContent.innerHTML = firstComponent;
        //     } else {
        //         mainContent.innerHTML = component;
        //     }
        // }


        value: function parsComponents(componentDom) {

            // if tag have a link to router
            Router.routerLink(componentDom);

            // for form TODO: need refactoring
            // componentDom.querySelectorAll('form').forEach((component) => {
            //     const self = this;
            //     component.onsubmit = function() {
            //
            //         saveForm(this, (data, form) => {
            //             let result = true;
            //             dataAfterForm = data;
            //
            //             if (customHadlerAfterForm) {
            //                 result = customHadlerAfterForm(data, form);
            //             }
            //
            //             if (result) {
            //                 const url = form.getAttribute(Variables.routerHref);
            //
            //                 if (url) {
            //                     Native.request(url, (component) => {
            //                         self.changeComponentDom(component);
            //                         Router.routing(url);
            //                     });
            //                 }
            //             }
            //
            //         }, () => { alert('Произошла ошибка, повторите попытку') });
            //
            //         return false;
            //     };
            // });

            Script.hasAttr(componentDom);

            // n-class
            this.getNClass(componentDom);
        }

        /*
            get n-class
        */

    }, {
        key: "getNClass",
        value: function getNClass(componentDom) {
            componentDom.querySelectorAll("[" + Var.className + "]").forEach(function (component) {
                var className = component.getAttribute(Var.className);
                virtuals.push(new Virtual(component, className));
            });
        }

        /*
         *    change Component dynamically
         */

    }, {
        key: "setComponent",
        value: function setComponent(name, str, tmp) {
            var _this = this;

            if (!cache[str]) {
                cache[str] = tmp;
            }
            debugger;
            // conuterRequestAPI = 0;
            document.querySelectorAll(name).forEach(function (_, dom) {
                dom.innerHTML = tmp;
                _this.parsComponents(dom);
            });

            // stateHistoryComponents.push(this.mainContent.innerHTML);
            this._documentIsReady(mainContent);
        }
    }, {
        key: "_documentIsReady",
        value: function _documentIsReady(component) {
            if (conuterRequestAPI === 0) {
                Observer.emit(Var.documentIsReady, component);
                Script.importScript(component);

                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = virtuals[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var virtual = _step.value;

                        Virtual.eventListener(virtual.el, virtual.methods);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        }
    }, {
        key: "mainContent",
        get: function get() {
            return mainContent;
        }
    }, {
        key: "cache",
        get: function get() {
            return cache;
        }
    }]);

    return Parse;
}();
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Virtual = exports.Virtual = function () {
	function Virtual(el) {
		var className = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

		_classCallCheck(this, Virtual);

		this.el = el;
		this.tmp = el.innerHTML;
		this.class = className;
		this.methods = Virtual.parseMethods(el);
	}

	_createClass(Virtual, [{
		key: 'destructor',
		value: function destructor() {
			Virtual.eventListener(this.el, this.methods, false);
		}

		/*
  		event listener
  */

	}], [{
		key: 'eventListener',
		value: function eventListener(el, methods) {
			var isAddEvent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

			var funcListener = isAddEvent ? 'addEventListener' : 'removeEventListener';
			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = methods[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var _step$value = _slicedToArray(_step.value, 2),
					    event = _step$value[0],
					    method = _step$value[1];

					el[funcListener](event, method);
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator.return) {
						_iterator.return();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}
		}

		/*
  		parse methods
  */

	}, {
		key: 'parseMethods',
		value: function parseMethods(el) {
			var resultMethods = new Map();

			var _iteratorNormalCompletion2 = true;
			var _didIteratorError2 = false;
			var _iteratorError2 = undefined;

			try {
				for (var _iterator2 = el.attributes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
					var attr = _step2.value;

					if (attr.name.startsWith(Var.listener)) {
						var func = attr.value;
						if (typeof attr.value === 'string') {
							func = new Function(attr.value);
						}
						resultMethods.set(attr.name.replace(Var.listener, ''), func);
					}
				}
			} catch (err) {
				_didIteratorError2 = true;
				_iteratorError2 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion2 && _iterator2.return) {
						_iterator2.return();
					}
				} finally {
					if (_didIteratorError2) {
						throw _iteratorError2;
					}
				}
			}

			return resultMethods;
		}
	}]);

	return Virtual;
}();